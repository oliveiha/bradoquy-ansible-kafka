---
- name: Create SSL Certificate Directory
  file:
    path: /var/ssl/private/kafka_connect_replicator_consumer
    state: directory
    mode: 0755
  when: copy_certs | default(True)

- name: Copy in MDS Public Pem File
  copy:
    src: "{{ kafka_connect_replicator_consumer_erp_pem_file }}"
    dest: "{{ kafka_connect_replicator_consumer_rbac_enabled_public_pem_path }}"
    mode: 0640
    owner: "{{kafka_connect_replicator_user}}"
    group: "{{kafka_connect_replicator_group}}"
  when: copy_certs | default(True)
  diff: "{{ not mask_sensitive_diff|bool }}"

# The following block of URI calls sets up the permissions for replicator when cluster_id is used for the indetifier.

- name: Grant Confluent Replicator User Developer Read on White List Topics on Source Cluster
  uri:
    url: "{{kafka_connect_replicator_consumer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{kafka_connect_replicator_consumer_ldap_user}}/roles/DeveloperRead/bindings"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{kafka_connect_replicator_consumer_erp_admin_user}}"
    url_password: "{{kafka_connect_replicator_consumer_erp_admin_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_connect_replicator_consumer_kafka_cluster_id}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{ item }}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  with_items: "{{ kafka_connect_replicator_white_list.split(',') }}"
  when: kafka_connect_replicator_consumer_kafka_cluster_id != "" and not ansible_check_mode

- name: Grant Confluent Replicator User Developer Manage on White List Topics on Source Cluster
  uri:
    url: "{{kafka_connect_replicator_consumer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{kafka_connect_replicator_consumer_ldap_user}}/roles/DeveloperManage/bindings"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{kafka_connect_replicator_consumer_erp_admin_user}}"
    url_password: "{{kafka_connect_replicator_consumer_erp_admin_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_connect_replicator_consumer_kafka_cluster_id}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{ item }}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  with_items: "{{ kafka_connect_replicator_white_list.split(',') }}"
  when: kafka_connect_replicator_consumer_kafka_cluster_id != "" and not ansible_check_mode

- name: Grant Confluent Replicator User Developer Read on timestamp topic on Source Cluster
  uri:
    url: "{{kafka_connect_replicator_consumer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{kafka_connect_replicator_consumer_ldap_user}}/roles/DeveloperRead/bindings"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{kafka_connect_replicator_consumer_erp_admin_user}}"
    url_password: "{{kafka_connect_replicator_consumer_erp_admin_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_connect_replicator_consumer_kafka_cluster_id}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{kafka_connect_replicator_consumer_timestamps_topic}}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  when: kafka_connect_replicator_consumer_kafka_cluster_id != "" and not ansible_check_mode

- name: Grant Confluent Replicator User Developer Manage on timestamp topic on Source Cluster
  uri:
    url: "{{kafka_connect_replicator_consumer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{kafka_connect_replicator_consumer_ldap_user}}/roles/DeveloperManage/bindings"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{kafka_connect_replicator_consumer_erp_admin_user}}"
    url_password: "{{kafka_connect_replicator_consumer_erp_admin_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_connect_replicator_consumer_kafka_cluster_id}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{kafka_connect_replicator_consumer_timestamps_topic}}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  when: kafka_connect_replicator_consumer_kafka_cluster_id != "" and not ansible_check_mode

- name: Grant Confluent Replicator User Resource Owner on Group on Source Cluster
  uri:
    url: "{{kafka_connect_replicator_consumer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{kafka_connect_replicator_consumer_ldap_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{kafka_connect_replicator_consumer_erp_admin_user}}"
    url_password: "{{kafka_connect_replicator_consumer_erp_admin_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "scope": {
          "clusters": {
            "kafka-cluster":"{{kafka_connect_replicator_consumer_kafka_cluster_id}}"
            }
        },
        "resourcePatterns": [
          {
            "resourceType":"Group",
            "name":"{{ kafka_connect_replicator_cluster_id }}",
            "patternType":"PREFIXED"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  when: kafka_connect_replicator_consumer_kafka_cluster_id != "" and not ansible_check_mode

# The following block of URI calls sets up the permissions for replicator when cluster_name is used for the indetifier.

- name: Grant Confluent Replicator User Developer Read on White List Topics on Source Cluster
  uri:
    url: "{{kafka_connect_replicator_consumer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{kafka_connect_replicator_consumer_ldap_user}}/roles/DeveloperRead/bindings"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{kafka_connect_replicator_consumer_erp_admin_user}}"
    url_password: "{{kafka_connect_replicator_consumer_erp_admin_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "scope": {
          "clusterName": "{{ kafka_connect_replicator_consumer_kafka_cluster_name }}"
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{ item }}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  with_items: "{{ kafka_connect_replicator_white_list.split(',') }}"
  when: kafka_connect_replicator_consumer_kafka_cluster_name != "" and not ansible_check_mode

- name: Grant Confluent Replicator User Developer Manage on White List Topics on Source Cluster
  uri:
    url: "{{kafka_connect_replicator_consumer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{kafka_connect_replicator_consumer_ldap_user}}/roles/DeveloperManage/bindings"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{kafka_connect_replicator_consumer_erp_admin_user}}"
    url_password: "{{kafka_connect_replicator_consumer_erp_admin_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "scope": {
          "clusterName": "{{ kafka_connect_replicator_consumer_kafka_cluster_name }}"
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{ item }}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  with_items: "{{ kafka_connect_replicator_white_list.split(',') }}"
  when: kafka_connect_replicator_consumer_kafka_cluster_name != "" and not ansible_check_mode

- name: Grant Confluent Replicator User Developer Read on timestamp topic on Source Cluster
  uri:
    url: "{{kafka_connect_replicator_consumer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{kafka_connect_replicator_consumer_ldap_user}}/roles/DeveloperRead/bindings"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{kafka_connect_replicator_consumer_erp_admin_user}}"
    url_password: "{{kafka_connect_replicator_consumer_erp_admin_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "scope": {
          "clusterName": "{{ kafka_connect_replicator_consumer_kafka_cluster_name }}"
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{kafka_connect_replicator_consumer_timestamps_topic}}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  when: kafka_connect_replicator_consumer_kafka_cluster_name != "" and not ansible_check_mode

- name: Grant Confluent Replicator User Developer Manage on timestamp topic on Source Cluster
  uri:
    url: "{{kafka_connect_replicator_consumer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{kafka_connect_replicator_consumer_ldap_user}}/roles/DeveloperManage/bindings"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{kafka_connect_replicator_consumer_erp_admin_user}}"
    url_password: "{{kafka_connect_replicator_consumer_erp_admin_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "scope": {
          "clusterName": "{{ kafka_connect_replicator_consumer_kafka_cluster_name }}"
        },
        "resourcePatterns": [
          {
            "resourceType":"Topic",
            "name":"{{kafka_connect_replicator_consumer_timestamps_topic}}",
            "patternType":"LITERAL"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  when: kafka_connect_replicator_consumer_kafka_cluster_name != "" and not ansible_check_mode

- name: Grant Confluent Replicator User Resource Owner on Group on Source Cluster
  uri:
    url: "{{kafka_connect_replicator_consumer_erp_host.split(',')[0]| default('localhost:8090')}}/security/1.0/principals/User:{{kafka_connect_replicator_consumer_ldap_user}}/roles/ResourceOwner/bindings"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{kafka_connect_replicator_consumer_erp_admin_user}}"
    url_password: "{{kafka_connect_replicator_consumer_erp_admin_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "scope": {
          "clusterName": "{{ kafka_connect_replicator_consumer_kafka_cluster_name }}"
        },
        "resourcePatterns": [
          {
            "resourceType":"Group",
            "name":"{{ kafka_connect_replicator_cluster_id }}",
            "patternType":"PREFIXED"
          }
        ]
      }
    status_code: 204
  register: replicator_mds_result
  until: replicator_mds_result.status == 204
  retries: 30
  delay: 5
  when: kafka_connect_replicator_consumer_kafka_cluster_name != "" and not ansible_check_mode
